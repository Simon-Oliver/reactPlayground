{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userId: '',\n      users: []\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('message', {\n        message: this.state.message,\n        user: this.state.userId\n      });\n      this.setState({\n        message: ''\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({\n      users\n    }));\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderUsers() {\n    const users = this.state.users;\n    const renderList = users.map(e => React.createElement(\"li\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, e.name));\n    return renderList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Messages\"), React.createElement(\"textarea\", {\n      value: this.state.message,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Test Emit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js"],"names":["React","Component","socketIOClient","Item","state","response","endpoint","userId","users","sendEmit","e","socket","emit","message","user","setState","changeInput","target","value","componentDidMount","on","data","num","componentWillUnmount","renderUsers","renderList","map","id","name","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CG,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE,4BAFJ;AAGNC,MAAAA,MAAM,EAAE,EAHF;AAINC,MAAAA,KAAK,EAAE;AAJD,KADkC;;AAAA,SA2B1CC,QA3B0C,GA2B/BC,CAAC,IAAI;AACd,YAAMC,MAAM,GAAGT,cAAc,CAAC,KAAKE,KAAL,CAAWE,QAAZ,CAA7B;AACAK,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ,EAAuB;AAAEC,QAAAA,OAAO,EAAE,KAAKT,KAAL,CAAWS,OAAtB;AAA+BC,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWG;AAAhD,OAAvB;AACA,WAAKQ,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAd;AACD,KA/ByC;;AAAA,SAiC1CG,WAjC0C,GAiC5BN,CAAC,IAAI;AACjB,WAAKK,QAAL,CAAc;AAAEF,QAAAA,OAAO,EAAEH,CAAC,CAACO,MAAF,CAASC;AAApB,OAAd;AACD,KAnCyC;AAAA;;AAQ1CC,EAAAA,iBAAiB,GAAG;AAAA,UACVb,QADU,GACG,KAAKF,KADR,CACVE,QADU,EAElB;;AACA,UAAMK,MAAM,GAAGT,cAAc,CAACI,QAAD,CAA7B,CAHkB,CAIlB;;AACAK,IAAAA,MAAM,CAACC,IAAP,CAAY,WAAZ;AACAD,IAAAA,MAAM,CAACS,EAAP,CAAU,UAAV,EAAsBZ,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA;AAAF,KAAd,CAA/B;AACAG,IAAAA,MAAM,CAACS,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI,KAAKN,QAAL,CAAc;AAAEV,MAAAA,QAAQ,EAAEgB,IAAI,CAACC;AAAjB,KAAd,CAAnC;AACAX,IAAAA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BZ,KAAK,IAAI,KAAKO,QAAL,CAAc;AAAEP,MAAAA;AAAF,KAAd,CAArC;AACD;;AAEDe,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACA;AACA;AACA;AACD;;AAYDC,EAAAA,WAAW,GAAG;AAAA,UACJhB,KADI,GACM,KAAKJ,KADX,CACJI,KADI;AAEZ,UAAMiB,UAAU,GAAGjB,KAAK,CAACkB,GAAN,CAAUhB,CAAC,IAAI;AAAI,MAAA,GAAG,EAAEA,CAAC,CAACiB,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBjB,CAAC,CAACkB,IAAlB,CAAf,CAAnB;AACA,WAAOH,UAAP;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAU,MAAA,KAAK,EAAE,KAAKzB,KAAL,CAAWS,OAA5B;AAAqC,MAAA,QAAQ,EAAEH,CAAC,IAAI,KAAKM,WAAL,CAAiBN,CAAjB,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKD,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CADF;AAOD;;AAnDyC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Item extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userId: '',\n    users: []\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({ users }));\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('message', { message: this.state.message, user: this.state.userId });\n    this.setState({ message: '' });\n  };\n\n  changeInput = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  renderUsers() {\n    const { users } = this.state;\n    const renderList = users.map(e => <li key={e.id}>{e.name}</li>);\n    return renderList;\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Messages</h3>\n        <textarea value={this.state.message} onChange={e => this.changeInput(e)} />\n        <button onClick={() => this.sendEmit()}>Test Emit</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}