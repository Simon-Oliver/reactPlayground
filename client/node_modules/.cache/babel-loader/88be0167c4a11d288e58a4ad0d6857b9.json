{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/helpers/withAuth.js\";\nimport React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuth } from '../../actions';\nexport default function withAuth(ComponentToProtect) {\n  var _temp;\n\n  return _temp = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        loading: true,\n        redirect: false\n      };\n    }\n\n    componentDidMount() {\n      fetch('/checkToken').then(res => {\n        if (res.status === 200) {\n          this.props.isAuth;\n          this.setState({\n            loading: false\n          });\n        } else {\n          const error = new Error(res.error);\n          throw error;\n        }\n      }).catch(err => {\n        this.setState({\n          loading: false,\n          redirect: true\n        });\n      });\n    }\n\n    render() {\n      const _this$state = this.state,\n            loading = _this$state.loading,\n            redirect = _this$state.redirect;\n\n      if (loading) {\n        return null;\n      }\n\n      if (redirect) {\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: this.props.location\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(ComponentToProtect, Object.assign({}, this.props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })));\n    }\n\n  }, _temp;\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/helpers/withAuth.js"],"names":["React","Component","Redirect","isAuth","withAuth","ComponentToProtect","state","loading","redirect","componentDidMount","fetch","then","res","status","props","setState","error","Error","catch","err","render","pathname","from","location"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,eAAe,SAASC,QAAT,CAAkBC,kBAAlB,EAAsC;AAAA;;AACnD,iBAAO,cAAcJ,SAAd,CAAwB;AAAA;AAAA;AAAA,WAC7BK,KAD6B,GACrB;AACNC,QAAAA,OAAO,EAAE,IADH;AAENC,QAAAA,QAAQ,EAAE;AAFJ,OADqB;AAAA;;AAM7BC,IAAAA,iBAAiB,GAAG;AAClBC,MAAAA,KAAK,CAAC,aAAD,CAAL,CACGC,IADH,CACQC,GAAG,IAAI;AACX,YAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;AACtB,eAAKC,KAAL,CAAWX,MAAX;AACA,eAAKY,QAAL,CAAc;AAAER,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAHD,MAGO;AACL,gBAAMS,KAAK,GAAG,IAAIC,KAAJ,CAAUL,GAAG,CAACI,KAAd,CAAd;AACA,gBAAMA,KAAN;AACD;AACF,OATH,EAUGE,KAVH,CAUSC,GAAG,IAAI;AACZ,aAAKJ,QAAL,CAAc;AAAER,UAAAA,OAAO,EAAE,KAAX;AAAkBC,UAAAA,QAAQ,EAAE;AAA5B,SAAd;AACD,OAZH;AAaD;;AAEDY,IAAAA,MAAM,GAAG;AAAA,0BACuB,KAAKd,KAD5B;AAAA,YACCC,OADD,eACCA,OADD;AAAA,YACUC,QADV,eACUA,QADV;;AAEP,UAAID,OAAJ,EAAa;AACX,eAAO,IAAP;AACD;;AACD,UAAIC,QAAJ,EAAc;AACZ,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEa,YAAAA,QAAQ,EAAE,QAAZ;AAAsBf,YAAAA,KAAK,EAAE;AAAEgB,cAAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS;AAAnB;AAA7B,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,kBAAD,oBAAwB,KAAKT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD;;AAnC4B,GAA/B;AAqCD","sourcesContent":["import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAuth } from '../../actions';\n\nexport default function withAuth(ComponentToProtect) {\n  return class extends Component {\n    state = {\n      loading: true,\n      redirect: false\n    };\n\n    componentDidMount() {\n      fetch('/checkToken')\n        .then(res => {\n          if (res.status === 200) {\n            this.props.isAuth;\n            this.setState({ loading: false });\n          } else {\n            const error = new Error(res.error);\n            throw error;\n          }\n        })\n        .catch(err => {\n          this.setState({ loading: false, redirect: true });\n        });\n    }\n\n    render() {\n      const { loading, redirect } = this.state;\n      if (loading) {\n        return null;\n      }\n      if (redirect) {\n        return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;\n      }\n      return (\n        <React.Fragment>\n          <ComponentToProtect {...this.props} />\n        </React.Fragment>\n      );\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}