{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('newUser', this.state.userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        userName: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({\n      users\n    }));\n    this.socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    this.socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({\n        userName: user.userName,\n        userId: user.userId\n      });\n    });\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderUsers() {\n    const users = this.state.users;\n    const renderList = users.map(e => React.createElement(\"li\", {\n      key: e.userId,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, e.userName));\n    return renderList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Test Socket.io\"), this.state.users.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"Active Users\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, this.renderUsers())) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"No Users\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, this.state.loggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, \"You're logged in as\\n              \".concat(this.state.userName)) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Please login!\"), React.createElement(\"input\", {\n      value: this.state.userName,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Test Emit\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js"],"names":["React","Component","socketIOClient","Login","state","response","endpoint","userName","userId","users","loggedIn","socket","sendEmit","e","emit","setState","changeInput","target","value","componentDidMount","on","data","num","user","console","log","componentWillUnmount","renderUsers","renderList","map","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Login extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false\n  };\n\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    // Very simply connect to the socket\n\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({ users }));\n    this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    this.socket.on('outgoing users', users => this.setState({ users }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({ userName: user.userName, userId: user.userId });\n    });\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('newUser', this.state.userName);\n    this.setState({ loggedIn: true });\n  };\n\n  changeInput = e => {\n    this.setState({ userName: e.target.value });\n  };\n\n  renderUsers() {\n    const { users } = this.state;\n    const renderList = users.map(e => <li key={e.userId}>{e.userName}</li>);\n    return renderList;\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Test Socket.io</h3>\n        {this.state.users.length ? (\n          <div>\n            <h4>Active Users</h4>\n            <ul>{this.renderUsers()}</ul>\n          </div>\n        ) : (\n          <h3>No Users</h3>\n        )}\n        <div>\n          {this.state.loggedIn ? (\n            <p>\n              {`You're logged in as\n              ${this.state.userName}`}\n            </p>\n          ) : (\n            <div>\n              <p>Please login!</p>\n              <input value={this.state.userName} onChange={e => this.changeInput(e)} />\n              <button onClick={() => this.sendEmit()}>Test Emit</button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}