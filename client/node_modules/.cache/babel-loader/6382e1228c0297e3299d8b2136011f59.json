{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { isBoolean } from 'util';\nimport Login from './Login';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false,\n      message: '',\n      messages: [],\n      error: ''\n    };\n    this.socket = io.connect(this.state.endpoint, {\n      query: {\n        token: sessionStorage.token\n      }\n    });\n\n    this.sendEmit = userName => {\n      this.socket.emit('create_user', userName);\n    };\n\n    this.sendMessage = message => {\n      console.log(message);\n      this.setState({\n        message\n      }, () => {\n        this.socket.emit('message', {\n          userName: this.state.userName,\n          id: this.socket.id,\n          message: this.state.message\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(sessionStorage); // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    // this.socket.emit('init_data');\n    // this.socket.on('get_data', data =>\n    //   this.setState({ users: data.users, messages: data.messages })\n    // );\n    // this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    // this.socket.on('outgoing users', users => this.setState({ users }));\n    // this.socket.on('initUser', user => {\n    //   console.log('Init User Fired', user);\n    //   this.setState({ userName: user.userName });\n    //   sessionStorage.token = user.token;\n    //   console.log(sessionStorage);\n    // });\n    // this.socket.on('error', e => this.setState({ error: e }));\n\n    const hasToken = !sessionStorage.userName === 'undefined';\n    console.log(sessionStorage.userName);\n\n    if (hasToken) {\n      console.log('componenstDidMount with sesssionstorage');\n      this.socket.emit('auth_check');\n    }\n\n    this.socket.on('create_user', data => {\n      sessionStorage.token = data.token;\n      sessionStorage.userName = data.userName;\n      this.socket.emit('auth_check');\n      this.setState({\n        error: ''\n      });\n    });\n    this.socket.on('auth', e => console.log(e));\n    this.socket.on('error', e => console.log(e));\n    this.socket.emit('login', {\n      userName: 'oli',\n      password: 'abc123'\n    });\n    this.socket.on('login', data => {\n      console.log(data);\n      sessionStorage.token = data.token;\n      sessionStorage.userName = data.userName;\n      this.setState({\n        useName: data.userName,\n        userId: data.userId\n      });\n    }); // this.socket.on('outgoing messages', message => {\n    //   console.log(message);\n    //   this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    // });\n    // this.socket.on('existing user', user =>\n    //   this.setState({ userName: user.userName, userId: user.userId })\n    // );\n  }\n\n  componentWillUnmount() {// this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  render() {\n    const isLoggedIn = this.state.error.type !== 'authentication_error';\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, isLoggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Authenticated\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Not Authenticated\"), React.createElement(Login, {\n      loggedIn: this.state.loggedIn,\n      sendEmit: this.sendEmit,\n      users: this.state.users,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","io","isBoolean","Login","Chat","state","response","endpoint","userName","userId","users","loggedIn","message","messages","error","socket","connect","query","token","sessionStorage","sendEmit","emit","sendMessage","console","log","setState","id","componentDidMount","hasToken","on","data","e","password","useName","componentWillUnmount","render","isLoggedIn","type"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport io from 'socket.io-client';\nimport { isBoolean } from 'util';\nimport Login from './Login';\n\nexport default class Chat extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false,\n    message: '',\n    messages: [],\n    error: ''\n  };\n\n  socket = io.connect(this.state.endpoint, { query: { token: sessionStorage.token } });\n\n  componentDidMount() {\n    console.log(sessionStorage);\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    // this.socket.emit('init_data');\n    // this.socket.on('get_data', data =>\n    //   this.setState({ users: data.users, messages: data.messages })\n    // );\n    // this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    // this.socket.on('outgoing users', users => this.setState({ users }));\n    // this.socket.on('initUser', user => {\n    //   console.log('Init User Fired', user);\n    //   this.setState({ userName: user.userName });\n    //   sessionStorage.token = user.token;\n    //   console.log(sessionStorage);\n    // });\n    // this.socket.on('error', e => this.setState({ error: e }));\n    const hasToken = !sessionStorage.userName === 'undefined';\n    console.log(sessionStorage.userName);\n    if (hasToken) {\n      console.log('componenstDidMount with sesssionstorage');\n      this.socket.emit('auth_check');\n    }\n    this.socket.on('create_user', data => {\n      sessionStorage.token = data.token;\n      sessionStorage.userName = data.userName;\n      this.socket.emit('auth_check');\n      this.setState({ error: '' });\n    });\n    this.socket.on('auth', e => console.log(e));\n    this.socket.on('error', e => console.log(e));\n    this.socket.emit('login', { userName: 'oli', password: 'abc123' });\n    this.socket.on('login', data => {\n      console.log(data);\n      sessionStorage.token = data.token;\n      sessionStorage.userName = data.userName;\n      this.setState({ useName: data.userName, userId: data.userId });\n    });\n    // this.socket.on('outgoing messages', message => {\n    //   console.log(message);\n    //   this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    // });\n    // this.socket.on('existing user', user =>\n    //   this.setState({ userName: user.userName, userId: user.userId })\n    // );\n  }\n\n  componentWillUnmount() {\n    // this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  sendEmit = userName => {\n    this.socket.emit('create_user', userName);\n  };\n\n  sendMessage = message => {\n    console.log(message);\n    this.setState({ message }, () => {\n      this.socket.emit('message', {\n        userName: this.state.userName,\n        id: this.socket.id,\n        message: this.state.message\n      });\n    });\n  };\n\n  render() {\n    const isLoggedIn = this.state.error.type !== 'authentication_error';\n\n    return (\n      <div>\n        {isLoggedIn ? <p>Authenticated</p> : <p>Not Authenticated</p>}\n        <Login\n          loggedIn={this.state.loggedIn}\n          sendEmit={this.sendEmit}\n          users={this.state.users}\n          userName={this.state.userName}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}