{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false,\n      messages: []\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = userName => {\n      this.socket.emit('newUser', userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.sendMessage = message => {\n      this.socket.emit('message', {\n        name: 'test',\n        id: this.socket.id\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({\n      users\n    }));\n    this.socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    this.socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({\n        userName: user.userName,\n        userId: user.userId\n      });\n    });\n    this.socket.on('outgoing message', message => this.setState(prevState => ({\n      messages: [...prevState, message]\n    }))); // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n\n    this.setState({\n      geoLoc: watchID\n    });\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Login, {\n      loggedIn: this.state.loggedIn,\n      sendEmit: this.sendEmit,\n      users: this.state.users,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"Test Send message\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","socketIOClient","Login","Chat","state","response","endpoint","userName","userId","users","loggedIn","messages","socket","sendEmit","emit","setState","sendMessage","message","name","id","componentDidMount","on","data","num","user","console","log","prevState","geoLoc","watchID","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\n\nexport default class Chat extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false,\n    messages: []\n  };\n\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    // Very simply connect to the socket\n\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({ users }));\n    this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    this.socket.on('outgoing users', users => this.setState({ users }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({ userName: user.userName, userId: user.userId });\n    });\n\n    this.socket.on('outgoing message', message =>\n      this.setState(prevState => ({ messages: [...prevState, message] }))\n    );\n\n    // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n\n    this.setState({ geoLoc: watchID });\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = userName => {\n    this.socket.emit('newUser', userName);\n    this.setState({ loggedIn: true });\n  };\n\n  sendMessage = message => {\n    this.socket.emit('message', { name: 'test', id: this.socket.id });\n  };\n\n  render() {\n    return (\n      <div>\n        <Login\n          loggedIn={this.state.loggedIn}\n          sendEmit={this.sendEmit}\n          users={this.state.users}\n          userName={this.state.userName}\n        />\n        <button onClick={this.sendMessage}>Test Send message</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}