{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { timingSafeEqual } from 'crypto';\nexport default class Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userId: '',\n      message: '',\n      messages: [],\n      users: []\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('message', {\n        message: this.state.message,\n        user: this.state.userId\n      });\n      this.setState({\n        message: ''\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({\n      users\n    }));\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    socket.on('outgoing messages', messages => this.setState({\n      messages\n    }));\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderMessages() {\n    const messages = this.state.messages;\n    const renderList = messages.map(e => React.createElement(\"li\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, e.message));\n    return renderList;\n  }\n\n  render() {\n    const messages = this.state.messages;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, \"Messages\"), messages.length ? this.renderMessages() : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"No Messages\"), React.createElement(\"textarea\", {\n      value: this.state.message,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Test Emit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js"],"names":["React","Component","socketIOClient","timingSafeEqual","Item","state","response","endpoint","userId","message","messages","users","sendEmit","e","socket","emit","user","setState","changeInput","target","value","componentDidMount","on","data","num","componentWillUnmount","renderMessages","renderList","map","id","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport { timingSafeEqual } from 'crypto';\n\nexport default class Item extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userId: '',\n    message: '',\n    messages: [],\n    users: []\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({ users }));\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n    socket.on('outgoing messages', messages => this.setState({ messages }));\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('message', { message: this.state.message, user: this.state.userId });\n    this.setState({ message: '' });\n  };\n\n  changeInput = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  renderMessages() {\n    const { messages } = this.state;\n    const renderList = messages.map(e => <li key={e.id}>{e.message}</li>);\n    return renderList;\n  }\n\n  render() {\n    const { messages } = this.state;\n    return (\n      <div>\n        <h3>Messages</h3>\n        {messages.length ? this.renderMessages() : <p>No Messages</p>}\n        <textarea value={this.state.message} onChange={e => this.changeInput(e)} />\n        <button onClick={() => this.sendEmit()}>Test Emit</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}