{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\nimport Messages from './Messages';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false,\n      message: '',\n      messages: []\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = userName => {\n      this.socket.emit('newUser', userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.sendMessage = message => {\n      console.log(message);\n      this.setState({\n        message\n      }, () => {\n        this.socket.emit('message', {\n          userName: this.state.userName,\n          id: this.socket.id,\n          message: this.state.message\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', data => this.setState({\n      users: data.users,\n      messages: data.messages\n    }));\n    this.socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    this.socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({\n        userName: user.userName,\n        userId: user.userId\n      });\n    });\n    this.socket.on('outgoing messages', message => {\n      console.log(message);\n      this.setState(prevState => ({\n        messages: [...prevState.messages, message]\n      }));\n    });\n    this.socket.on('existing user', user => this.setState({\n      userName: user.userName,\n      userId: user.userId\n    }));\n    this.socket('error', e => console.log(e)); // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n    // this.setState({ geoLoc: watchID });\n  }\n\n  componentWillUnmount() {// this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Login, {\n      loggedIn: this.state.loggedIn,\n      sendEmit: this.sendEmit,\n      users: this.state.users,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), this.state.messages.length ? React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Loading...\"), React.createElement(Message, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","socketIOClient","Login","Message","Messages","Chat","state","response","endpoint","userName","userId","users","loggedIn","message","messages","socket","sendEmit","emit","setState","sendMessage","console","log","id","componentDidMount","on","data","num","user","prevState","e","componentWillUnmount","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\nimport Messages from './Messages';\n\nexport default class Chat extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false,\n    message: '',\n    messages: []\n  };\n\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    // Very simply connect to the socket\n\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', data =>\n      this.setState({ users: data.users, messages: data.messages })\n    );\n    this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    this.socket.on('outgoing users', users => this.setState({ users }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({ userName: user.userName, userId: user.userId });\n    });\n\n    this.socket.on('outgoing messages', message => {\n      console.log(message);\n      this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    });\n\n    this.socket.on('existing user', user =>\n      this.setState({ userName: user.userName, userId: user.userId })\n    );\n    this.socket('error', e => console.log(e));\n\n    // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n\n    // this.setState({ geoLoc: watchID });\n  }\n\n  componentWillUnmount() {\n    // this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  sendEmit = userName => {\n    this.socket.emit('newUser', userName);\n    this.setState({ loggedIn: true });\n  };\n\n  sendMessage = message => {\n    console.log(message);\n    this.setState({ message }, () => {\n      this.socket.emit('message', {\n        userName: this.state.userName,\n        id: this.socket.id,\n        message: this.state.message\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Login\n          loggedIn={this.state.loggedIn}\n          sendEmit={this.sendEmit}\n          users={this.state.users}\n          userName={this.state.userName}\n        />\n        {this.state.messages.length ? (\n          <Messages messages={this.state.messages} />\n        ) : (\n          <p>Loading...</p>\n        )}\n        <Message sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}