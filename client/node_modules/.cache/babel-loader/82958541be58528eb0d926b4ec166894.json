{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/'\n    };\n\n    this.sendEmit = () => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('incoming data', 'Test Emiter');\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      width: \"100vw\",\n      height: \"100vh\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Test Socket.io\"), React.createElement(\"button\", {\n      onClick: this.sendEmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, \"Test Emit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js"],"names":["React","Component","socketIOClient","Item","state","response","endpoint","sendEmit","socket","emit","componentDidMount","on","data","setState","num","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CG,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KADkC;;AAAA,SAc1CC,QAd0C,GAc/B,MAAM;AACf,YAAMC,MAAM,GAAGN,cAAc,CAAC,KAAKE,KAAL,CAAWE,QAAZ,CAA7B;AACAE,MAAAA,MAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,aAA7B;AACD,KAjByC;AAAA;;AAM1CC,EAAAA,iBAAiB,GAAG;AAAA,UACVJ,QADU,GACG,KAAKF,KADR,CACVE,QADU,EAElB;;AACA,UAAME,MAAM,GAAGN,cAAc,CAACI,QAAD,CAA7B,CAHkB,CAIlB;;AACAE,IAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI,KAAKC,QAAL,CAAc;AAAER,MAAAA,QAAQ,EAAEO,IAAI,CAACE;AAAjB,KAAd,CAAnC;AACD;;AAODC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAmB,MAAA,MAAM,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAQ,MAAA,OAAO,EAAE,KAAKR,QAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADF;AAMD;;AA1ByC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Item extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/'\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n  }\n\n  sendEmit = () => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('incoming data', 'Test Emiter');\n  };\n\n  render() {\n    return (\n      <div width=\"100vw\" height=\"100vh\">\n        <h3>Test Socket.io</h3>\n        <button onClick={this.sendEmit}>Test Emit</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}