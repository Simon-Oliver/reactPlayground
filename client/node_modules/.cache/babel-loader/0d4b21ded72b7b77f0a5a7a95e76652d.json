{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = e => {\n      this.socket.emit('newUser', this.state.userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({\n      users\n    }));\n    this.socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    this.socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({\n        userName: user.userName,\n        userId: user.userId\n      });\n    });\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Login, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","socketIOClient","Login","Chat","socket","state","endpoint","sendEmit","e","emit","userName","setState","loggedIn","componentDidMount","on","users","data","response","num","user","console","log","userId","componentWillUnmount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,eAAe,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CI,MAD0C,GACjCH,cAAc,CAAC,KAAKI,KAAL,CAAWC,QAAZ,CADmB;;AAAA,SAyB1CC,QAzB0C,GAyB/BC,CAAC,IAAI;AACd,WAAKJ,MAAL,CAAYK,IAAZ,CAAiB,SAAjB,EAA4B,KAAKJ,KAAL,CAAWK,QAAvC;AACA,WAAKC,QAAL,CAAc;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KA5ByC;AAAA;;AAG1CC,EAAAA,iBAAiB,GAAG;AAClB;AAEA;AACA,SAAKT,MAAL,CAAYK,IAAZ,CAAiB,WAAjB;AACA,SAAKL,MAAL,CAAYU,EAAZ,CAAe,UAAf,EAA2BC,KAAK,IAAI,KAAKJ,QAAL,CAAc;AAAEI,MAAAA;AAAF,KAAd,CAApC;AACA,SAAKX,MAAL,CAAYU,EAAZ,CAAe,eAAf,EAAgCE,IAAI,IAAI,KAAKL,QAAL,CAAc;AAAEM,MAAAA,QAAQ,EAAED,IAAI,CAACE;AAAjB,KAAd,CAAxC;AACA,SAAKd,MAAL,CAAYU,EAAZ,CAAe,gBAAf,EAAiCC,KAAK,IAAI,KAAKJ,QAAL,CAAc;AAAEI,MAAAA;AAAF,KAAd,CAA1C;AACA,SAAKX,MAAL,CAAYU,EAAZ,CAAe,UAAf,EAA2BK,IAAI,IAAI;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BF,IAA/B;AACA,WAAKR,QAAL,CAAc;AAAED,QAAAA,QAAQ,EAAES,IAAI,CAACT,QAAjB;AAA2BY,QAAAA,MAAM,EAAEH,IAAI,CAACG;AAAxC,OAAd;AACD,KAHD;AAID;;AAEDC,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACA;AACA;AACA;AACD;;AAODC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF;AAKD;;AApCyC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\n\nexport default class Chat extends Component {\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    // Very simply connect to the socket\n\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({ users }));\n    this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    this.socket.on('outgoing users', users => this.setState({ users }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({ userName: user.userName, userId: user.userId });\n    });\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    this.socket.emit('newUser', this.state.userName);\n    this.setState({ loggedIn: true });\n  };\n\n  render() {\n    return (\n      <div>\n        <Login />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}