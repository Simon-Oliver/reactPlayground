{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      users: []\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('newUser', this.state.userName);\n      this.setState({\n        userName: ''\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        message: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({\n      users\n    }));\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderUsers() {\n    const users = this.state.users;\n    const renderList = users.map(e => React.createElement(\"li\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, e.name));\n    return renderList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Messages\"), React.createElement(\"textarea\", {\n      value: this.state.message,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Test Emit\"), this.state.users.length ? React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.renderUsers()) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, \"No Users\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js"],"names":["React","Component","socketIOClient","Item","state","response","endpoint","userName","users","sendEmit","e","socket","emit","setState","changeInput","message","target","value","componentDidMount","on","data","num","componentWillUnmount","renderUsers","renderList","map","id","name","render","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CG,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE,4BAFJ;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,KAAK,EAAE;AAJD,KADkC;;AAAA,SA2B1CC,QA3B0C,GA2B/BC,CAAC,IAAI;AACd,YAAMC,MAAM,GAAGT,cAAc,CAAC,KAAKE,KAAL,CAAWE,QAAZ,CAA7B;AACAK,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ,EAAuB,KAAKR,KAAL,CAAWG,QAAlC;AACA,WAAKM,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KA/ByC;;AAAA,SAiC1CO,WAjC0C,GAiC5BJ,CAAC,IAAI;AACjB,WAAKG,QAAL,CAAc;AAAEE,QAAAA,OAAO,EAAEL,CAAC,CAACM,MAAF,CAASC;AAApB,OAAd;AACD,KAnCyC;AAAA;;AAQ1CC,EAAAA,iBAAiB,GAAG;AAAA,UACVZ,QADU,GACG,KAAKF,KADR,CACVE,QADU,EAElB;;AACA,UAAMK,MAAM,GAAGT,cAAc,CAACI,QAAD,CAA7B,CAHkB,CAIlB;;AACAK,IAAAA,MAAM,CAACC,IAAP,CAAY,WAAZ;AACAD,IAAAA,MAAM,CAACQ,EAAP,CAAU,UAAV,EAAsBX,KAAK,IAAI,KAAKK,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd,CAA/B;AACAG,IAAAA,MAAM,CAACQ,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI,KAAKP,QAAL,CAAc;AAAER,MAAAA,QAAQ,EAAEe,IAAI,CAACC;AAAjB,KAAd,CAAnC;AACAV,IAAAA,MAAM,CAACQ,EAAP,CAAU,gBAAV,EAA4BX,KAAK,IAAI,KAAKK,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd,CAArC;AACD;;AAEDc,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACA;AACA;AACA;AACD;;AAYDC,EAAAA,WAAW,GAAG;AAAA,UACJf,KADI,GACM,KAAKJ,KADX,CACJI,KADI;AAEZ,UAAMgB,UAAU,GAAGhB,KAAK,CAACiB,GAAN,CAAUf,CAAC,IAAI;AAAI,MAAA,GAAG,EAAEA,CAAC,CAACgB,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgBhB,CAAC,CAACiB,IAAlB,CAAf,CAAnB;AACA,WAAOH,UAAP;AACD;;AAEDI,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAEE;AAAU,MAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWW,OAA5B;AAAqC,MAAA,QAAQ,EAAEL,CAAC,IAAI,KAAKI,WAAL,CAAiBJ,CAAjB,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKD,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,EAIG,KAAKL,KAAL,CAAWI,KAAX,CAAiBqB,MAAjB,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKN,WAAL,EAAL,CAA1B,GAA0D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJ7D,CADF;AAQD;;AApDyC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Item extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    users: []\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({ users }));\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('newUser', this.state.userName);\n    this.setState({ userName: '' });\n  };\n\n  changeInput = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  renderUsers() {\n    const { users } = this.state;\n    const renderList = users.map(e => <li key={e.id}>{e.name}</li>);\n    return renderList;\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Messages</h3>\n        <textarea value={this.state.message} onChange={e => this.changeInput(e)} />\n        <button onClick={() => this.sendEmit()}>Test Emit</button>\n        {this.state.users.length ? <ul>{this.renderUsers()}</ul> : <h3>No Users</h3>}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}