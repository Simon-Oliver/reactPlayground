{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Item extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      users: []\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('newUser', this.state.userName);\n      this.setState({\n        userName: ''\n      });\n      console.log(users);\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        userName: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n  }\n\n  componentWillUnmount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint);\n    socket.off('outgoing data');\n    socket.off('outgoing users');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      style: {\n        height: '100vh',\n        width: '100vw'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Test Socket.io\"), React.createElement(\"input\", {\n      value: this.state.userName,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, \"Test Emit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Item.js"],"names":["React","Component","socketIOClient","Item","state","response","endpoint","userName","users","sendEmit","e","socket","emit","setState","console","log","changeInput","target","value","componentDidMount","on","data","num","componentWillUnmount","off","render","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CG,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE,4BAFJ;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,KAAK,EAAE;AAJD,KADkC;;AAAA,SAyB1CC,QAzB0C,GAyB/BC,CAAC,IAAI;AACd,YAAMC,MAAM,GAAGT,cAAc,CAAC,KAAKE,KAAL,CAAWE,QAAZ,CAA7B;AACAK,MAAAA,MAAM,CAACC,IAAP,CAAY,SAAZ,EAAuB,KAAKR,KAAL,CAAWG,QAAlC;AACA,WAAKM,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD,KA9ByC;;AAAA,SAgC1CQ,WAhC0C,GAgC5BN,CAAC,IAAI;AACjB,WAAKG,QAAL,CAAc;AAAEN,QAAAA,QAAQ,EAAEG,CAAC,CAACO,MAAF,CAASC;AAArB,OAAd;AACD,KAlCyC;AAAA;;AAQ1CC,EAAAA,iBAAiB,GAAG;AAAA,UACVb,QADU,GACG,KAAKF,KADR,CACVE,QADU,EAElB;;AACA,UAAMK,MAAM,GAAGT,cAAc,CAACI,QAAD,CAA7B,CAHkB,CAIlB;;AACAK,IAAAA,MAAM,CAACS,EAAP,CAAU,eAAV,EAA2BC,IAAI,IAAI,KAAKR,QAAL,CAAc;AAAER,MAAAA,QAAQ,EAAEgB,IAAI,CAACC;AAAjB,KAAd,CAAnC;AACAX,IAAAA,MAAM,CAACS,EAAP,CAAU,gBAAV,EAA4BZ,KAAK,IAAI,KAAKK,QAAL,CAAc;AAAEL,MAAAA;AAAF,KAAd,CAArC;AACD;;AAEDe,EAAAA,oBAAoB,GAAG;AAAA,UACbjB,QADa,GACA,KAAKF,KADL,CACbE,QADa,EAErB;;AACA,UAAMK,MAAM,GAAGT,cAAc,CAACI,QAAD,CAA7B;AACAK,IAAAA,MAAM,CAACa,GAAP,CAAW,eAAX;AACAb,IAAAA,MAAM,CAACa,GAAP,CAAW,gBAAX;AACD;;AAaDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,OAAV;AAAmBC,QAAAA,KAAK,EAAE;AAA1B,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,EAEE;AAAO,MAAA,KAAK,EAAE,KAAKvB,KAAL,CAAWG,QAAzB;AAAmC,MAAA,QAAQ,EAAEG,CAAC,IAAI,KAAKM,WAAL,CAAiBN,CAAjB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKD,QAAL,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHF,CADF;AAOD;;AA5CyC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Item extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    users: []\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n  }\n\n  componentWillUnmount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    socket.off('outgoing data');\n    socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('newUser', this.state.userName);\n    this.setState({ userName: '' });\n    console.log(users);\n  };\n\n  changeInput = e => {\n    this.setState({ userName: e.target.value });\n  };\n\n  render() {\n    return (\n      <div className=\"container\" style={{ height: '100vh', width: '100vw' }}>\n        <h3>Test Socket.io</h3>\n        <input value={this.state.userName} onChange={e => this.changeInput(e)} />\n        <button onClick={() => this.sendEmit()}>Test Emit</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}