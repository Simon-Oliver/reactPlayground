{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      const userId = socket.id;\n      this.setState({\n        userId\n      });\n      socket.emit('newUser', {\n        userName: this.state.userName,\n        userId: this.state.userId\n      });\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        userName: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({\n      users\n    }));\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderUsers() {\n    const users = this.state.users;\n    const renderList = users.map(e => React.createElement(\"li\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, e.name));\n    return renderList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Test Socket.io\"), this.state.users.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Active Users\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.renderUsers())) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"No Users\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, this.state.loggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"You're logged in as\", this.state.userName) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.userName,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Test Emit\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js"],"names":["React","Component","socketIOClient","Login","state","response","endpoint","userName","userId","users","loggedIn","sendEmit","e","socket","id","setState","emit","changeInput","target","value","componentDidMount","on","data","num","componentWillUnmount","renderUsers","renderList","map","name","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Login extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({ users }));\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    const userId = socket.id;\n    this.setState({ userId });\n    socket.emit('newUser', { userName: this.state.userName, userId: this.state.userId });\n    this.setState({ loggedIn: true });\n  };\n\n  changeInput = e => {\n    this.setState({ userName: e.target.value });\n  };\n\n  renderUsers() {\n    const { users } = this.state;\n    const renderList = users.map(e => <li key={e.id}>{e.name}</li>);\n    return renderList;\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Test Socket.io</h3>\n        {this.state.users.length ? (\n          <div>\n            <h4>Active Users</h4>\n            <ul>{this.renderUsers()}</ul>\n          </div>\n        ) : (\n          <h3>No Users</h3>\n        )}\n        <div>\n          {this.state.loggedIn ? (\n            <p>\n              You're logged in as\n              {this.state.userName}\n            </p>\n          ) : (\n            <div>\n              <input value={this.state.userName} onChange={e => this.changeInput(e)} />\n              <button onClick={() => this.sendEmit()}>Test Emit</button>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}