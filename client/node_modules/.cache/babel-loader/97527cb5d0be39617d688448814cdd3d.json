{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nexport default class Login extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: []\n    };\n\n    this.sendEmit = e => {\n      const socket = socketIOClient(this.state.endpoint);\n      socket.emit('newUser', this.state.userName);\n      this.setState({\n        userName: ''\n      });\n    };\n\n    this.changeInput = e => {\n      this.setState({\n        userName: e.target.value\n      });\n    };\n  }\n\n  componentDidMount() {\n    const endpoint = this.state.endpoint; // Very simply connect to the socket\n\n    const socket = socketIOClient(endpoint); // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({\n      users\n    }));\n    socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    socket.on('outgoing users', users => this.setState({\n      users\n    }));\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  renderUsers() {\n    const users = this.state.users;\n    const renderList = users.map(e => React.createElement(\"li\", {\n      key: e.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, e.name));\n    return renderList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Test Socket.io\"), this.state.users.length ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Active Users\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, this.renderUsers())) : React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"No Users\"), React.createElement(\"input\", {\n      value: this.state.userName,\n      onChange: e => this.changeInput(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.sendEmit(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Test Emit\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Login.js"],"names":["React","Component","socketIOClient","Login","state","response","endpoint","userName","userId","users","sendEmit","e","socket","emit","setState","changeInput","target","value","componentDidMount","on","data","num","componentWillUnmount","renderUsers","renderList","map","id","name","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\n\nexport default class Login extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: []\n  };\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    // Very simply connect to the socket\n    const socket = socketIOClient(endpoint);\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    socket.emit('init_data');\n    socket.on('get_data', users => this.setState({ users }));\n    socket.on('outgoing data', data => this.setState({ response: data.num }));\n    socket.on('outgoing users', users => this.setState({ users }));\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = e => {\n    const socket = socketIOClient(this.state.endpoint);\n    socket.emit('newUser', this.state.userName);\n    this.setState({ userName: '' });\n  };\n\n  changeInput = e => {\n    this.setState({ userName: e.target.value });\n  };\n\n  renderUsers() {\n    const { users } = this.state;\n    const renderList = users.map(e => <li key={e.id}>{e.name}</li>);\n    return renderList;\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Test Socket.io</h3>\n        {this.state.users.length ? (\n          <div>\n            <h4>Active Users</h4>\n            <ul>{this.renderUsers()}</ul>\n          </div>\n        ) : (\n          <h3>No Users</h3>\n        )}\n        <input value={this.state.userName} onChange={e => this.changeInput(e)} />\n        <button onClick={() => this.sendEmit()}>Test Emit</button>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}