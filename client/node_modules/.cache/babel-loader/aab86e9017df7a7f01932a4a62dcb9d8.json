{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\nimport Messages from './Messages';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false,\n      message: '',\n      messages: [],\n      error: ''\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = userName => {\n      this.socket.emit('newUser', userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.sendMessage = message => {\n      console.log(message);\n      this.setState({\n        message\n      }, () => {\n        this.socket.emit('message', {\n          userName: this.state.userName,\n          id: this.socket.id,\n          message: this.state.message\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    console.log(sessionStorage); // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    // this.socket.emit('init_data');\n    // this.socket.on('get_data', data =>\n    //   this.setState({ users: data.users, messages: data.messages })\n    // );\n    // this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    // this.socket.on('outgoing users', users => this.setState({ users }));\n    // this.socket.on('initUser', user => {\n    //   console.log('Init User Fired', user);\n    //   this.setState({ userName: user.userName, userId: user.userId });\n    // });\n    // this.socket.on('error', e => this.setState({ error: e }));\n    // this.socket.on('outgoing messages', message => {\n    //   console.log(message);\n    //   this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    // });\n    // this.socket.on('existing user', user =>\n    //   this.setState({ userName: user.userName, userId: user.userId })\n    // );\n  }\n\n  componentWillUnmount() {// this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  render() {\n    const isLoggedIn = !this.state.error.type === 'authentication_error';\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, isLoggedIn ? React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Authenticated\") : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"Not Authenticated\"), React.createElement(Login, {\n      loggedIn: this.state.loggedIn,\n      sendEmit: this.sendEmit,\n      users: this.state.users,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), this.state.messages.length ? React.createElement(Messages, {\n      messages: this.state.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }) : React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Loading...\"), React.createElement(Message, {\n      sendMessage: this.sendMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","socketIOClient","Login","Message","Messages","Chat","state","response","endpoint","userName","userId","users","loggedIn","message","messages","error","socket","sendEmit","emit","setState","sendMessage","console","log","id","componentDidMount","sessionStorage","componentWillUnmount","render","isLoggedIn","type","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC1CM,KAD0C,GAClC;AACNC,MAAAA,QAAQ,EAAE,CADJ;AAENC,MAAAA,QAAQ,EAAE,4BAFJ;AAGNC,MAAAA,QAAQ,EAAE,EAHJ;AAINC,MAAAA,MAAM,EAAE,EAJF;AAKNC,MAAAA,KAAK,EAAE,EALD;AAMNC,MAAAA,QAAQ,EAAE,KANJ;AAONC,MAAAA,OAAO,EAAE,EAPH;AAQNC,MAAAA,QAAQ,EAAE,EARJ;AASNC,MAAAA,KAAK,EAAE;AATD,KADkC;AAAA,SAa1CC,MAb0C,GAajCf,cAAc,CAAC,KAAKK,KAAL,CAAWE,QAAZ,CAbmB;;AAAA,SA4C1CS,QA5C0C,GA4C/BR,QAAQ,IAAI;AACrB,WAAKO,MAAL,CAAYE,IAAZ,CAAiB,SAAjB,EAA4BT,QAA5B;AACA,WAAKU,QAAL,CAAc;AAAEP,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACD,KA/CyC;;AAAA,SAiD1CQ,WAjD0C,GAiD5BP,OAAO,IAAI;AACvBQ,MAAAA,OAAO,CAACC,GAAR,CAAYT,OAAZ;AACA,WAAKM,QAAL,CAAc;AAAEN,QAAAA;AAAF,OAAd,EAA2B,MAAM;AAC/B,aAAKG,MAAL,CAAYE,IAAZ,CAAiB,SAAjB,EAA4B;AAC1BT,UAAAA,QAAQ,EAAE,KAAKH,KAAL,CAAWG,QADK;AAE1Bc,UAAAA,EAAE,EAAE,KAAKP,MAAL,CAAYO,EAFU;AAG1BV,UAAAA,OAAO,EAAE,KAAKP,KAAL,CAAWO;AAHM,SAA5B;AAKD,OAND;AAOD,KA1DyC;AAAA;;AAe1CW,EAAAA,iBAAiB,GAAG;AAClBH,IAAAA,OAAO,CAACC,GAAR,CAAYG,cAAZ,EADkB,CAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG,CACrB;AACA;AACD;;AAkBDC,EAAAA,MAAM,GAAG;AACP,UAAMC,UAAU,GAAG,CAAC,KAAKtB,KAAL,CAAWS,KAAX,CAAiBc,IAAlB,KAA2B,sBAA9C;AAEA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,UAAU,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAH,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADvC,EAEE,oBAAC,KAAD;AACE,MAAA,QAAQ,EAAE,KAAKtB,KAAL,CAAWM,QADvB;AAEE,MAAA,QAAQ,EAAE,KAAKK,QAFjB;AAGE,MAAA,KAAK,EAAE,KAAKX,KAAL,CAAWK,KAHpB;AAIE,MAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWG,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAQG,KAAKH,KAAL,CAAWQ,QAAX,CAAoBgB,MAApB,GACC,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,KAAKxB,KAAL,CAAWQ,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXJ,EAaE,oBAAC,OAAD;AAAS,MAAA,WAAW,EAAE,KAAKM,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CADF;AAiBD;;AAhFyC","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\nimport Messages from './Messages';\n\nexport default class Chat extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false,\n    message: '',\n    messages: [],\n    error: ''\n  };\n\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    console.log(sessionStorage);\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    // this.socket.emit('init_data');\n    // this.socket.on('get_data', data =>\n    //   this.setState({ users: data.users, messages: data.messages })\n    // );\n    // this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    // this.socket.on('outgoing users', users => this.setState({ users }));\n    // this.socket.on('initUser', user => {\n    //   console.log('Init User Fired', user);\n    //   this.setState({ userName: user.userName, userId: user.userId });\n    // });\n    // this.socket.on('error', e => this.setState({ error: e }));\n    // this.socket.on('outgoing messages', message => {\n    //   console.log(message);\n    //   this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    // });\n    // this.socket.on('existing user', user =>\n    //   this.setState({ userName: user.userName, userId: user.userId })\n    // );\n  }\n\n  componentWillUnmount() {\n    // this.socket.off('outgoing data');\n    // this.socket.off('outgoing users');\n  }\n\n  sendEmit = userName => {\n    this.socket.emit('newUser', userName);\n    this.setState({ loggedIn: true });\n  };\n\n  sendMessage = message => {\n    console.log(message);\n    this.setState({ message }, () => {\n      this.socket.emit('message', {\n        userName: this.state.userName,\n        id: this.socket.id,\n        message: this.state.message\n      });\n    });\n  };\n\n  render() {\n    const isLoggedIn = !this.state.error.type === 'authentication_error';\n\n    return (\n      <div>\n        {isLoggedIn ? <p>Authenticated</p> : <p>Not Authenticated</p>}\n        <Login\n          loggedIn={this.state.loggedIn}\n          sendEmit={this.sendEmit}\n          users={this.state.users}\n          userName={this.state.userName}\n        />\n        {this.state.messages.length ? (\n          <Messages messages={this.state.messages} />\n        ) : (\n          <p>Loading...</p>\n        )}\n        <Message sendMessage={this.sendMessage} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}