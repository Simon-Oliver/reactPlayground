{"ast":null,"code":"var _jsxFileName = \"/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js\";\nimport React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\nexport default class Chat extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      response: 0,\n      endpoint: 'http://192.168.1.105:5000/',\n      userName: '',\n      userId: '',\n      users: [],\n      loggedIn: false,\n      messages: []\n    };\n    this.socket = socketIOClient(this.state.endpoint);\n\n    this.sendEmit = userName => {\n      this.socket.emit('newUser', userName);\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.sendMessage = message => {\n      this.socket.emit('message', {\n        userName: this.state.userName,\n        id: this.socket.id,\n        message: this.state.message\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Very simply connect to the socket\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({\n      users\n    }));\n    this.socket.on('outgoing data', data => this.setState({\n      response: data.num\n    }));\n    this.socket.on('outgoing users', users => this.setState({\n      users\n    }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({\n        userName: user.userName,\n        userId: user.userId\n      });\n    });\n    this.socket.on('outgoing messages', message => {\n      console.log(message);\n      this.setState(prevState => ({\n        messages: [...prevState.messages, message]\n      }));\n    }); // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n    // this.setState({ geoLoc: watchID });\n  }\n\n  componentWillUnmount() {// const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Login, {\n      loggedIn: this.state.loggedIn,\n      sendEmit: this.sendEmit,\n      users: this.state.users,\n      userName: this.state.userName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }), React.createElement(Message, {\n      messages: this.messages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/Simon/Desktop/Coding/reactplayground/client/src/components/Chat.js"],"names":["React","Component","socketIOClient","Login","Message","Chat","state","response","endpoint","userName","userId","users","loggedIn","messages","socket","sendEmit","emit","setState","sendMessage","message","id","componentDidMount","on","data","num","user","console","log","prevState","componentWillUnmount","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport socketIOClient from 'socket.io-client';\nimport Login from './Login';\nimport Message from './Message';\n\nexport default class Chat extends Component {\n  state = {\n    response: 0,\n    endpoint: 'http://192.168.1.105:5000/',\n    userName: '',\n    userId: '',\n    users: [],\n    loggedIn: false,\n    messages: []\n  };\n\n  socket = socketIOClient(this.state.endpoint);\n\n  componentDidMount() {\n    // Very simply connect to the socket\n\n    // Listen for data on the \"outgoing data\" namespace and supply a callback for what to do when we get one. In this case, we set a state variable\n    this.socket.emit('init_data');\n    this.socket.on('get_data', users => this.setState({ users }));\n    this.socket.on('outgoing data', data => this.setState({ response: data.num }));\n    this.socket.on('outgoing users', users => this.setState({ users }));\n    this.socket.on('initUser', user => {\n      console.log('Init User Fired', user);\n      this.setState({ userName: user.userName, userId: user.userId });\n    });\n\n    this.socket.on('outgoing messages', message => {\n      console.log(message);\n      this.setState(prevState => ({ messages: [...prevState.messages, message] }));\n    });\n\n    // const watchID = navigator.geolocation.watchPosition(position => {\n    //   this.setState({ lat: position.coords.latitude, long: position.coords.longitude });\n    //   console.log(position.coords.latitude, position.coords.longitude);\n    // });\n\n    // this.setState({ geoLoc: watchID });\n  }\n\n  componentWillUnmount() {\n    // const { endpoint } = this.state;\n    // Very simply connect to the socket\n    // const socket = socketIOClient(endpoint);\n    // socket.off('outgoing data');\n    // socket.off('outgoing users');\n  }\n\n  sendEmit = userName => {\n    this.socket.emit('newUser', userName);\n    this.setState({ loggedIn: true });\n  };\n\n  sendMessage = message => {\n    this.socket.emit('message', {\n      userName: this.state.userName,\n      id: this.socket.id,\n      message: this.state.message\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Login\n          loggedIn={this.state.loggedIn}\n          sendEmit={this.sendEmit}\n          users={this.state.users}\n          userName={this.state.userName}\n        />\n        <Message messages={this.messages} />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}